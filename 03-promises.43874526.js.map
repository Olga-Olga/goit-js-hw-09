{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAMMC,EAAWC,SAASC,cAAc,SACxCC,QAAQC,IAAIJ,GACZA,EAASK,iBAAiB,UAE1B,SAAkBC,G,kBASdC,YAAW,WAef,IAAuBC,EAAUC,EACzBC,GADeF,EAdHG,EAAI,EAcSF,EAdNG,EAAQD,EAAIE,EAe/BH,EAAgBI,KAAKC,SAAW,GACpB,IAAIC,SAAQ,SAACC,EAAKC,GAC9BR,EACFO,EAAI,CAAET,WAAUC,UAGhBS,EAAI,CAAEV,WAAUC,S,KApBbU,MAAK,SAAAC,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MACjBN,QAAQkB,IAAI,uBAAwCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,OAC1DX,EAAAyB,OAAOC,QAAQ,uBAAwCF,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,IAE9DgB,OAAM,SAAAL,G,IAAGZ,EAAQY,EAARZ,SAAUC,EAAKW,EAALX,MAClBN,QAAQkB,IAAI,sBAAuCC,OAAfd,EAAS,QAAYc,OAANb,EAAM,OACzDX,EAAAyB,OAAOG,QAAQ,sBAAqCJ,OAAfd,EAAS,QAAYc,OAANb,EAAM,M,MAG7DG,EAAQD,EAAIE,E,EAnBjBP,EAAMqB,iBACN,IAA8BC,EAAAtB,EAAMuB,OAAOC,SAArClB,EAAwBgB,EAAxBnB,MAAOI,EAAiBe,EAAjBf,KAAMkB,EAAWH,EAAXG,OACnBnB,EAAQoB,OAAOpB,EAAMqB,OACrBpB,EAAOmB,OAAOnB,EAAKoB,OACnBF,EAASC,OAAOD,EAAOE,OACvBnC,EAAAyB,OAAOW,QAAQ,eAAyBZ,OAAVV,EAAM,MAAaU,OAATT,EAAK,MAAWS,OAAPS,IAEjD,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAQI,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// let delay\n// let step\n// let amount\n\nconst submitEl = document.querySelector(\".form\")\nconsole.dir(submitEl);\nsubmitEl.addEventListener(\"submit\", callback)\n\nfunction callback(event) {\n  event.preventDefault()\n  let { delay, step, amount } = event.target.elements\n  delay = Number(delay.value)\n  step = Number(step.value)\n  amount = Number(amount.value);\n  Notify.warning(`Get valuve: ${delay}, ${step}, ${amount}`)\n\n  for (let i = 0; i < amount; i++) {\n    setTimeout(() => {\n      createPromise(i + 1, delay + i * step)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n    },\n      (delay + i * step))\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.5;  \n  const myPromise = new Promise((res, rej) => {\n    if (shouldResolve) {\n      res({ position, delay });\n    }\n    else {\n      rej({ position, delay })\n    }\n  });\n  \n  return myPromise\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$submitEl","document","querySelector","console","dir","addEventListener","event","setTimeout","position","delay","shouldResolve","i","delay1","step","Math","random","Promise","res","rej","then","param","log","concat","Notify","success","catch","failure","preventDefault","_elements","target","elements","amount","Number","value","warning","i1","_loop"],"version":3,"file":"03-promises.43874526.js.map"}