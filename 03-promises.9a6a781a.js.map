{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAMA,MAAMC,EAAWC,SAASC,cAAc,SA4BxC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATkB,IAAIC,SAAQ,CAACC,EAAKC,KAC9BL,EACFI,EAAI,C,SAAEN,E,MAAUC,IAGhBM,EAAI,C,SAAEP,E,MAAUC,GAAQ,G,CAlC9BO,QAAQC,IAAIb,GACZA,EAASc,iBAAiB,UAE1B,SAAkBC,GAChBA,EAAMC,iBACN,IAAMX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAMK,OAAOC,SAC3CJ,EAAQK,OAAOL,EAAMM,OACrBL,EAAOI,OAAOJ,EAAKK,OACnBJ,EAASG,OAAOH,EAAOI,OACvBzB,EAAA0B,OAAOC,QAAQ,eAAeR,MAAUC,MAASC,KAEjD,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQO,IAC1BC,YAAW,KACTxB,EAAcuB,EAAI,EAAGT,EAAQS,EAAIR,GAC9BU,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBO,QAAQiB,IAAI,uBAAqBzB,QAAiBC,OAClDP,EAAA0B,OAAOM,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEhE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBO,QAAQiB,IAAI,sBAAoBzB,QAAiBC,OACjDP,EAAA0B,OAAOQ,QAAQ,sBAAoB5B,QAAeC,MAAU,GAC5D,GAEHY,EAAQS,EAAIR,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// let delay\n// let step\n// let amount\n\nconst submitEl = document.querySelector(\".form\")\nconsole.dir(submitEl);\nsubmitEl.addEventListener(\"submit\", callback)\n\nfunction callback(event) {\n  event.preventDefault()\n  let { delay, step, amount } = event.target.elements\n  delay = Number(delay.value)\n  step = Number(step.value)\n  amount = Number(amount.value);\n  Notify.warning(`Get valuve: ${delay}, ${step}, ${amount}`)\n\n  for (let i = 0; i < amount; i++) {\n    setTimeout(() => {\n      createPromise(i + 1, delay + i * step)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n    },\n      (delay + i * step))\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.5;  \n  const myPromise = new Promise((res, rej) => {\n    if (shouldResolve) {\n      res({ position, delay });\n    }\n    else {\n      rej({ position, delay })\n    }\n  });\n  \n  return myPromise\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$submitEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","console","dir","addEventListener","event","preventDefault","delay1","step","amount","target","elements","Number","value","Notify","warning","i","setTimeout","then","log","success","catch","failure"],"version":3,"file":"03-promises.9a6a781a.js.map"}