{"mappings":"gfAAA,IAEIA,EACAC,EACAC,EAJJC,EAAAC,EAAA,SAMMC,EAAWC,SAASC,cAAc,SA4BxC,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATkB,IAAIC,SAAQ,SAACC,EAAKC,GAC9BL,EACFI,EAAI,CAAEN,WAAUQ,MAAAP,IAGhBM,EAAI,CAAEP,WAAUQ,MAAAP,G,IAlCtBQ,QAAQC,IAAId,GACZA,EAASe,iBAAiB,UAE1B,SAAkBC,GAChBA,EAAMC,iBAENtB,EAAQuB,OAAOF,EAAMG,OAAOC,SAASR,MAAMS,OAC3CzB,EAAOsB,OAAOF,EAAMG,OAAOC,SAASE,KAAKD,OACzCxB,EAASqB,OAAOF,EAAMG,OAAOC,SAASG,OAAOF,OAC7CvB,EAAA0B,OAAOC,QAAQ,eAAyBC,OAAV/B,EAAM,MAAa+B,OAAT9B,EAAK,MAAW8B,OAAP7B,IACjD8B,YAAW,WAEX,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAQ+B,IACxBzB,EAAcyB,EAAGhC,GACdiC,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAU2B,EAAKD,EAALlB,MACjBC,QAAQmB,IAAI,uBAAwCN,OAAftB,EAAS,QAAYsB,OAANK,EAAM,OAC1DjC,EAAA0B,OAAOS,QAAQ,uBAAwCP,OAAftB,EAAS,QAAYsB,OAANK,EAAM,M,IAE9DG,OAAM,SAAAJ,G,IAAG1B,EAAQ0B,EAAR1B,SAAU+B,EAAKL,EAALlB,MAClBC,QAAQmB,IAAI,sBAAuCN,OAAftB,EAAS,QAAYsB,OAANS,EAAM,OACzDrC,EAAA0B,OAAOY,QAAQ,sBAAqCV,OAAftB,EAAS,QAAYsB,OAANS,EAAM,M,MAI/DxC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nlet delay\nlet step\nlet amount\n\nconst submitEl = document.querySelector(\".form\")\nconsole.dir(submitEl);\nsubmitEl.addEventListener(\"submit\", callback)\n\nfunction callback(event) {\n  event.preventDefault()\n  // const { delay, step, amount } = event.target.elements\n  delay = Number(event.target.elements.delay.value)\n  step = Number(event.target.elements.step.value)\n  amount = Number(event.target.elements.amount.value);\n  Notify.warning(`Get valuve: ${delay}, ${step}, ${amount}`)\n  setTimeout(() => {\n\n  for (let i = 0; i < amount; i++) {    \n      createPromise(i, step)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n  }\n    \n  }, delay)\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;  \n  const myPromise = new Promise((res, rej) => {\n    if (shouldResolve) {\n      res({ position, delay });\n    }\n    else {\n      rej({ position, delay })\n    }\n  });\n  \n  return myPromise\n}\n"],"names":["$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$submitEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","res","rej","delay","console","dir","addEventListener","event","preventDefault","Number","target","elements","value","step","amount","Notify","warning","concat","setTimeout","i","then","param","delay1","log","success","catch","delay2","failure"],"version":3,"file":"03-promises.e1cc8eaf.js.map"}